service: auth-repo

custom:
  secrets: ${file(secrets.json)}
  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    includeModules: true   # Node modules configuration for packaging
    packager: 'npm'   # Packager that will be used to package your external modules
    excludeFiles: ./**/*.test.js # Provide a glob for files to ignore

provider:
  name: aws
  runtime: nodejs12.x
  timeout: 5
  memorySize: 128
  region: eu-central-1
  stage: ${self:custom.secrets.NODE_ENV, dev}
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}

    NODE_ENV: ${self:custom.secrets.NODE_ENV}
    DB_NAME: ${self:custom.secrets.DB_NAME}
    DB_USER: ${self:custom.secrets.DB_USER}
    DB_PASSWORD: ${self:custom.secrets.DB_PASSWORD}
    DB_HOST: ${self:custom.secrets.DB_HOST}
    DB_PORT: ${self:custom.secrets.DB_PORT}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
      Resource: 'arn:aws:dynamodb:eu-central-1:*:*'

  exclude:
    - .dynamodb/**
    - node_modules/
#  vpc:
#    securityGroupIds:
#      - ${self:custom.secrets.SECURITY_GROUP_ID}
#    subnetIds:
#      - ${self:custom.secrets.SUBNET1_ID}
#      - ${self:custom.secrets.SUBNET2_ID}
#      - ${self:custom.secrets.SUBNET3_ID}

functions:
  create:
    handler: handler.create
    events:
      - http:
          path: user
          method: post
          cors: true
          private: true
  findByName:
    handler: handler.findByName
    events:
      - http:
          path: user/name/{username}
          method: get
          cors: true
          private: true

plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-webpack

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: username
            KeyType: RANGE          
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    GatewayResponseUnauthorized:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'

package:
  individually: true
